services:
  # Base de datos PostgreSQL para tests
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: reservaflow_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d reservaflow_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis para locks distribuidos y Celery broker
  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ alternativo para Celery (más realista para producción)
  test-rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: test_user
      RABBITMQ_DEFAULT_PASS: test_password
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5673:5672"
      - "15673:15672"  # Management UI
    volumes:
      - test_rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Aplicación Django para tests
  test-web:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings_test
      - POSTGRES_HOST=test-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=reservaflow_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - REDIS_URL=redis://test-redis:6379/0
      - CELERY_BROKER_URL=redis://test-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://test-redis:6379/0
      # Alternativo con RabbitMQ:
      # - CELERY_BROKER_URL=amqp://test_user:test_password@test-rabbitmq:5672//
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Esperando servicios...' &&
        sleep 10 &&
        python manage.py migrate --settings=config.settings_test &&
        python manage.py collectstatic --noinput --settings=config.settings_test &&
        echo 'Servicios listos para tests'
      "

  # Worker Celery REAL (no síncrono)
  test-celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings_test
      - POSTGRES_HOST=test-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=reservaflow_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - REDIS_URL=redis://test-redis:6379/0
      - CELERY_BROKER_URL=redis://test-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://test-redis:6379/0
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-web:
        condition: service_completed_successfully
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Iniciando Celery Worker...' &&
        celery -A config worker --loglevel=info --concurrency=2
      "

  # Celery Beat para tareas programadas
  test-celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings_test
      - POSTGRES_HOST=test-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=reservaflow_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - REDIS_URL=redis://test-redis:6379/0
      - CELERY_BROKER_URL=redis://test-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://test-redis:6379/0
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-web:
        condition: service_completed_successfully
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Iniciando Celery Beat...' &&
        celery -A config beat --loglevel=info
      "

volumes:
  test_postgres_data:
  test_redis_data:
  test_rabbitmq_data:

networks:
  default:
    name: reservaflow_test_network